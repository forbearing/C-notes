1:函数原型的概念和声明
	1:函数原型的概念:
		1:函数定义是指对函数功能的确立,包括指定函数名,函数返回类型,形参及类型,
		  函数体等,它是一个完整的,独立的函数单位
		2:函数原型声明则是把函数的名字,函数返回类型以及形参的个数,类型和顺序(注
		  意,不包括函数体)通知编译系统,以便在对包含函数调用的语句进行编译时,据此
		  对其进行对照检查(例如函数名是否正确,实参与形参的类型和个数是否一致)
	2:函数原型的声明
		类型说明符 函数名(类型 形参, 类型 形参...);
			(或者)
		类型说明符 函数名(类型, 类型);
	


2:函数原型的作用
	1:根据函数原型在程序编译阶段对调用函数的合法性进行全面检查
	2:如果发现与哈市年原型不匹配的函数调用就报告编译出错,它属于语法错误. 用户
	  根据屏幕显示的出错信息很容易发现和纠正错误
	3:函数原型定义了一种标准的行为,具体的功能实现由函数定义去完成,并且同一个函数
	  原型可由多个用户各自编写的函数定义来实现不同的功能


3:函数原型的使用注意点
	1:应当保证函数原型与函数定义写法上一致,即函数返回类型,函数名,参数个数,参数
	  类型和参数顺序必须相同. 在函数调用时函数名,实参类型和实参个数应与函数原型
	  一致
	2:当被调函数的函数定义出现在主调函数之前时,在主调函数中也可以不对被调函数
	  再作声明而直接调用
	3:当被调函数的函数定义出现在主调函数之后时,则必须在调用函数之前对被调用函数
	  作声明,目的就是在函数尚未定义的情况下,实现将该函数的有关信息通知编译系统,
	  以便使编译能正常进行
	4:如在所有函数定义之前,在函数外先声明各个函数,则在以后的各主调函数中,可不再
	  对被调哈市年左声明
	5:如果被调函数的返回值是整型或字符型时,不管定义在主调函数之前或之后,可以不对
	  被调函数左声明而直接调用,这时系统将自动对被调函数返回值按整型处理 ***
	6:对C的标准库函数的调用不需要再作声明,但必须把该函数的头文件用 #include 命令
	  包含在源文件前部
	7:养成对所有用到的函数左声明的习惯,这是保证程序正确性和可读性的重要环节


5:函数参数的求值顺序
	1:当一个函数带有多个参数时,C没有规定在调用实参时的求值顺序,并允许不同的编译
	  系统根据代码优化的需求,自行规定对实参的求值顺序
	2:从左至右还是自右至左求值,其输出顺序都是不变的,即输出顺序总是和实参表中实参
	  的顺序相同,有些编译器,如 Turbo C, 是自右至左求值,这都取决于编译系统


6:二义性的产生和避免
	1:求值顺序的不确定型会导致同一程序在不同的编译系统下产生二义性
		sum_int(++x, x+y);
	2:在进行函数调用时,实参都必须具有确定的值才能避免二义性


4:others:
	0:知识点
		0: #include <stdio.h> 和 #include "mymath.h" 的区别
		1:函数的声明(原型)另起一个.h文件
		2:.h文件函数的定义实现另一个.c文件(可以多个)
		3:上述.c文件做成一个.o模块
		4:多个.o模块做成库文件
	1:函数不可以重复定义,但可以重复声明
	2: #include "mymath.h":  头文件寻找顺序: a.
		1:C源文件目录查找 
		2:从 -I 选项指定的目录中寻找 
		3:标准方式查找 (/usr/include)
		4:系统头文件也可以使用双引号: #include "stdio.h"
	3: #include <mymath.h>: 
		1:不会从C源文件目录中查找
		2:从 -I 选项指定的目录中寻找
