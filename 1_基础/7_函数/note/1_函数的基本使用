1:函数的作用和分类
	1:C程序的全部工作都是由各种各样的函数完成的,所以也把C语言称为函数式语言
	2:函数是C语言的基本模块,函数的调用是按需调用,通过对函数的调用实现特定的功能 
	3:函数可以把相对独立的某个功能抽象出来,使之成为程序中的一个独立实体,可以在
	  同一程序或其他程序中多次重复使用
	4:函数的作用:
		1:使程序变得更简短而清晰
		2:有利于程序维护
		3:可以提高程序开发的效率
		4:提高了代码的重用性
	5:根据函数的定义划分:
		1:库函数: 由C系统提供,用户无须定义,也不必在程序中作类型说明,只需在程序前
		  包含有该函数原型的头文件即可在程序中直接调用
		2:用户定义函数: 由用户按需写的函数,对于用户自定义函数,不仅需要在程序中定
		  义函数本身,而且在主调函数模块中通常还要对该函数进行声明,然后才能使用.
	6:根据函数的返回划分:
		1:有返回值函数: 函数被调用执行完后将向调用者返回一个执行结果
		2:无返回值函数: 函数用于完成某项特定的处理任务,执行完后不向调用者返回
		  函数值
	7:根据函数的参数划分:
		1:无参函数: 函数定义,函数声明及函数调用中均不带参数
		2:有参函数: 也称带参函数,在函数定义,函数声明及函数调用时都有参数
	8:根据函数的功能划分:
		1:输入输出函数
		2:字符串函数
		3:数学函数
		4:日期和时间函数



2:函数定义
	1:无参函数定义:
		类型说明符 函数名()
		{
			语句
			...
		}
	2:有参函数定义:
		类型说明符 函数名(形式参数列表)
		{
			语句
			...
		}
	3:函数定义说明:
		1:类型说明符: 指明函数的返回值类型
		2:{}中的内容称为函数体
		3:函数若无返回返回值类型为 void 并无需用 return 语句返回
		4:函数若有返回,则需要 return 语句返回一个与返回值类型匹配的值
		5:有参函数比无参函数多一个形式参数列表称为形式参数(形参),它们可以是各种
		  类型的变量,各参数之间用逗号间隔



3:函数调用
	1:函数调用形式:
		函数名(实际参数列表);
		1:实际参数也称为实参,实参之间用逗号分隔,对无参函数调用时则无实际参数表.
		  实参可以是常量,变量,表达式,函数等.无论实参是何种类型,在进行函数调用时,
		  它们都必须具有确定的值,以便把这些值传送给形参,因此应预先用赋值,输入等
		  办法使实参获得确定值
		2:实参和形参在数量上,类型上,顺序上应严格一致,否则会发生"类型不匹配"错误
		3:函数调用中发送的数据传输是单向的,即只能把实参的值传送给形参,而不能把
		  形参的值反向地传送给实参,因此在函数调用过程中,形参的值发生改变,而
		  实参中的值不会变化
	2:函数调用方式:
		1:函数表达式: 函数作为表达式中的一项出现在表达式中,以函数返回值参与表达
		  式的运算,这种方式要求函数是有返回值的
		  如: z = max(x,y) 是一个赋值表达式,把 max 的返回值赋予变量z
		2:函数语句:函数调用的一般形式加上分号即构成函数语句
		  如: printf("%d",a);  scanf("%d",&b); 都是以函数语句的方式调用函数
		3:函数实参: 函数作为另一个函数调用的实际参数出现,这种情况是把该函数的
		  返回值作为实参进行传送,因此要求该函数必须是有返回值的
		  如: printf("%d"max(x,y)); 将 max 的返回值作为 printf 函数的实参来使用G	3:函数的嵌套调用
		1:C程序有函数组成,C程序的执行由 main 函数作为入口,C语言中不允许左嵌套的
		  函数定义
		2:所有函数之间都是平行的,定义时是相互独立,不存在上一级函数和下一级函数的
		  问题
		3:C语言允许在一个函数的定义中出现对另一个函数的调用,这样就出现了函数的
		  嵌套调用,即在被调函数中又调用其他函数
