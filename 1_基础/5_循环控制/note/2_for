1:for 循环的语法结构
	1:for(表达式1;表达式2;表达式3) 循环体语句;
	2:for 循环的简单应用形式
		for(循环变量初始化; 循环条件; 循环变量修改) 循环体语句;
		1:循环变量初始化总是一个赋值语句,用来给循环控制变量赋初值
		2:循环条件是一个关系表达式,它决定什么时候退出循环
		3:循环变量修改,定义循环控制变量每循环一次后按什么方式变化
		4:三个部分之间用";"隔开
	3:for 循环的使用注意点
		1:for 循环中的"表达式1(循环变量初始化)","表达式2(循环条件)"和"表达式3(
		  循环变量修改)"都是选择项,即可以省略,但";"不能缺省
		2:表达式1(循环变量初始化)在循环开始时执行一次, 若省略表示不对循环控制
		  变量赋初值
		3:表达式2(循环条件)在循环体每次执行前都要执行一次,若省略则遵循条件始终
		  为真,便成为死循环
		4:表达式3(循环变量修改)在循环它每次执行外币,在表达式2即将执行之前执行,
		  若省略并且不再循环体中修改也会死循环
		5:三个表达式都可以省略(即for(;;)循环体语句;),等同于 while(1){...}
		6:表达式1一般是赋值表达式,表达式2一般是关系和逻辑表达式,表达式3一般为
		  算数表达式(递增或递减)



2:各种循环的比较
	1:一种循环可以解决的问题,使用另外两种同样可行,只是方便程序不同
	2:while 循环一般用于循环不定的情况, for 循环一般用于循环次数确定的情况(也
	  可以用于循环次数不定的情况), do-while 循环一般用于至少需要执行一次的情况
	3:for 循环和 while 循环是先判断是否为真,再执行循环体,因此,可出现循环一次也
	  不执行的情况. do-while 循环是先执行循环体,再判断条件是否为真,因此循环体
	  至少执行一次


3:循环的使用注意点
	1:在循环体内除了修改控制次数外, 不要把循环变量修改成其他无关的值,防止循环
	  失去控制
	2:在多层循环中,如有可能应当将最长的循环放在最内层,最短的循环放在最外层,以
	  减少 CPU 跨切循环层的次数
	3:如果循环体内存在逻辑判断,并且循环次数很大,应将逻辑判断移到循环体的外面
	4:将以 for 语句的循环控制变量的取值采用 "半开半闭区间"写法.如:
	  for(x=0;x<N;x++)(...), 而 for(x=0;x<=N-1;x++){...}属于闭区间
	5:while, do-while 和 for 三种循环可以相互嵌套.
