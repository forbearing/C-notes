1:二维数组的定义
	1:在实际的问题解决中,一维数组无法解决的问题可采用二维甚至多维数组来解决,因此
	  C语言允许构造多维数组,多维数组元素有多个下标,以标识它在数组中的位置
	2:二维数组的定义方式:
		类型说明符 数组名[常量表达式1][常量表达式2]
		1:常量表达式1: 表示第一维下标的长度,代表行.
		2:常量表达式2: 表示第二维下标的长度,代表列.
	3:二维数组可以看成是一维数组作为数组元素的一维数组.
	4:在C语言中,二维数组是按行存储的,且地址是连续的.
	5:如:三行四列的二维数组a,先存放 a[2] 行,再存放 a[1] 行,最后存放 a[0] 行,
	  每行中有四个元素也是依次存放.

		a[2][3]		高地址		栈底
		a[2][3]		  
		a[2][1]		  |
		a[2][0]		  |
		a[1][3]		  |
		.......		  |
		a[0][2]		  v
		a[0][1]		  
		a[0][0]		低地址		栈顶


2:二维数组的初始化
	1:按元素存储顺序初始化
		int a[2][3] = {1,2,3,4,5,6};
		int a[2][3] = {1,2,3};		// 部分初始化,第二行元素为{0,0,0}
	2:按行初始化
		int a[2][3] = {{1,2,3},{4,5,6}};
		int a[2][3] = {{1},{5,6}};	// 部分初始化,实际为{{1,0,0},{5,6,0}}
	3:省略行的初始化(列不能省略)
		int a[][4]={{1,2,3,4},{5,6,7,8}};
		int b[][3]={1,2,3,4,5,6,7,8,9};
		int c[][3]={{1,2},{3}};		// 部分初始化


3:二维数组的引用
	1:二维数组的元素采用为双下标,代表为为行和列
	2:二维数组元素引用的形式: 数组名 [行的下标][列的下标]
		1:下标应为整型常量或整型表达式
