1:二维数组的表示


2:指针遍历二维数组
	1:下标法遍历: 
		通过二维数组的行和列的下标遍历数组中的元素
	2:列指针遍历:
		根据二维数组在内存中按行连续存储的方式,可通过列地址(列指针)按顺序来
		遍历数组中的元素
	3:行指针遍历
		数组指针的定义
			类型说明符 (*指针变量名)[n];
			1:定义一个数组指针或称为行指针,它指向一个包含n个元素的一维数组,
			  元素的数据类型由类型说明符指定
			2:将二维数组名字(第一行地址)赋值给数组指针即可完成初始化
			3:行指针需要先将其变成列指针后方可遍历数组中的元素
	3:指针与二维数组的概要
		1:二维数组由行地址(行指针)和咧地址(列指针)
		2:二维数组的名字为第一行地址,二维数组名字加上 n 为 n+1 行地址
		3:二维数组的每一行地址和每一行第一列地址本身的值是相同的,但具有不同概念
		4:通过行地址(行指针)和列地址(列指针)均可以遍历二维数组
		5:指针运算符(*)加上行地址可获得列地址,指针运算符(*)加上列地址可获得列地
		  址中的元素值


3:二维字符数组
	1:二维字符数组中每一行为一个一维字符数组或一个字符串
		char names[][20] = {"zhangsan", "lisi", "wangwu"};
	2:二维字符数组中每一行第一列的地址为每一行即一维字符数组的首地址
	3:每一行即一维字符数组的输入输出
		scanf("%s", names[0]);		// 输入第一行
		printf("%s", names[0]);		// 输出第一行


示例
	pointer_two_array.c				// 二维数组的表示
	pointer_two_array2.c			// 指针遍历二维数组
	student_sort.c					// 二维字符数组,学生姓名排序
	student_score.c
	addrlist.h  addrlist.c addrlist_test.c
