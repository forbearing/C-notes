1:文件类型结构体 FILE 和文件指针
	1:文件类型结构体 FILE
		1:换从文件系统为每个正在使用的文件在内存开辟文件信息区
		2:文件信息用系统定义的名为 FILE 的结构体描述
		3:FILE 定义在 stdio.h 中
			typedef struct{
				short level;				// 缓冲区满/空程度
				unsigned flags				// 文件状态标志
				char fd;					// 文件描述符
				unsigned char hold;			// 若无缓冲区不读区字符
				short bsize;				// 缓冲区大小
				unsigned char *buffer;		// 数据传送缓冲区位置
				unsigned char *curp;		// 当前读写位置
				unsigned istemp;			// 临时文件指示
				short token;				// 用作无效检测
			}FILE;					// 结构体类型名 FILE
	2:文件指针的定义
		FILE *指针变量名;
		1:文件指针实际上是一个文件类型结构体指针
		2:通过文件指针即可找到存放某个文件信息的文件类型结构体变量,然后按结构体
		  变量提供的信息找到该文件,实施对文件的操作
		3:习惯上也笼统地把文件指针称为指向一个文件的指针(流指针)
		4:文件打开时,系统自动创建文件类型结构体变量,并把指向它的指针返回来,
		  程序通过这个指针获得文件信息并访问文件
		5:文件关闭后,文件指针指向的结构体变量就会被释放


2:文件打开
	1:FILE *fopen(char *filename, char *mode);
		1:功能: 按指定方式打开文件
		2:参数
			filename: 要打开的文件路径(相对路径或绝对路径)
			mode: 使用文件方式
		3:返回: 正常打开,返回文件指针,打开失败返回NULL
		4:标准输入,标准输出和标准错误是由系统打开,可直接使用
	2:使用文件的方式
		"rt"	只读打开一个文本文件, 只允许读数据
		"wt"	只写打开或建立一个文本文件, 只允许写数据
		"at"	追加打开一个文本文件, 并在文本末尾写数据
		"rb"	只读打开一个二进制文件, 只允许读数据
		"wb"	只写打开或建立一个二进制文件, 只允许写数据
		"ab"	追加打开一个二进制文件,并在文件末尾写数据
		"rt+"	读写打开一个文本文件, 允许读和写
		"wt+"	读写打开或建立agiel文本文件, 允许读写
		"at+"	读写打开一个文本文件, 允许读,或在文本末尾追加数据
		"rb+"	读写打开一个二进制文件, 允许读和写
		"wb+"	读写打开或建立一个二进制文件,允许读和写
		"ab+"	读写打开一个二进制文件, 允许读或在文本末尾追加数据
	3:符号定义
		r	read,读
		w	write,写
		a	append,追加
		t	text,文本文件,可省略
		b	binary,二进制文件
		+	读和写
	4:文件使用的处理方式
		mode	处理方式	当文件不存在时		当文件存在时	写文件	读文件
		"r"		读取		出错				打开文件		不能	可以
		"w"		写入		建立新文件			覆盖原有文件	可以	不能
		"a"		追加		建立新文件			原有文件后追加	可以	不能
		"r+"	读取/写入	出错				打开文件		可以	可以
		"w+"	读取/写入	建立新文件			覆盖原有文件	可以	可以
		"a+"	读取/追加	建立新文件			原有文件后追加	可以	可以


3:文件关闭
	int fclose(FILE *fp);
	1:功能: 关闭 fp 指向的文件,释放文件类型结构体和文件指针
	2:参数 fp 打开文件时返回的文件指针
	3:返回: 成功返回0, 失败返回-1;
	4:注意点: 不关闭文件可能会丢失数据
		1:向文件写数据时,是先将数据输出到缓冲区,待缓冲区充满后才正式输出给文件,
		  如果当数据未充满缓冲区而程序结束运行,就会将缓冲区的数据丢失.
		2:fclose 先把缓冲区数据输出到磁盘文件(刷新缓存),然后才释放
		  文件结构体和文件指针


4:ftell 和文件位置指针
	int ftell(FILE *fp)
	1:功能: 测试当前文件的读写位置
	2:返回:测试成功返回文件位置指针所在的位置(当前读写位置距离文件开头的字节数)
		   失败返回 -1
	3:文件位置指针: 指向当前读写位置的指针
	4:示例
		FILE *fp
		fp = fopen("test.txt", "w");
		long pos = ftell(fp);


示例:
	file_open_close.c
