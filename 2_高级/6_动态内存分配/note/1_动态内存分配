1:内存分配方式
	1:从静态存储区域分配:
		内存在程序编译的时候就已经分配号, 这块内存在程序的整个运行期间都存在,
		例如: 全局变量,static变量
	2:在栈上分配
		在执行函数时,函数内具备变量的存储单元都可以在栈上创建,函数执行结束时这些
		存储单元自动被释放. 效率很高,但是分配的内存容量有限
	3:从堆上分配也成为动态内存分配
		程序在运行的时候用 malloc 等函数申请任意多少的内存,程序员自己负责在何时
		用 free 释放内存.动态内存的生存期由我们决定,使用非常灵活,但问题也最多.
		动态分配的内存块全局存在.
		进程退出会自动释放内存块


2:动态内存分配和释放函数
	1:malloc 函数
		void *malloc(size_t size);
		功能: 允许从空闲内存池中分配连续内存但不初始化
		参数: size 参数是agiel所需字节数的整数
		返回: 若分配成功则返回一个指向该内存块的指针,在使用时可根据需要做强制
			  类型转换, 否则返回 NULL(空指针)
	2:calloc 函数
		void *calloc(size_t num_elements, size_t element_size);f
		功能: 功能同 malloc, 但作初始化
		参数: num_elements 是所需元素的数量, element_size 是么个元素的字节数
		返回: 同 malloc 函数
	3:realloc 函数
		void *realloc(voi *ptr, size_t new_size)
		功能: 在指针 ptr 指向的内存基础上扩大或缩小内存
		参数: ptr 是指向先前通过 malloc,calloc 和 realloc 函数分配的内存块的指针
			  new_size 是内存块的新大小,可能大于或小于原有内存大小
		返回: 若能调整内存大小,则返回指向调整后内存的指针,否则返回 NULL
	4:realloc 函数的使用注意点
		1:当扩展内存时,不会对添加进内存块的字节进行初始化(扩展出的不初始化)
		2:若不能调整内存则返回 NULL, 但原有内存中的数据不会发生改变
		3:若第一个参数为 NULL, 那么功能等同于 malloc 函数, 若第二个参数为0,
		  那么会释放调用内存块
		4:在缩小或扩大内存时,一般不会对其进行移动,若无法扩大内存块(内存块后面的
		  字节已经用于其他目的),那么可能会在别处分配新的内存块,然后把旧块中的数
		  据复制到新块中,并将旧块删除释放内存
	5:free 函数
		void free(void *ptr);
		功能: 释放由指针 ptr 指向的动态分配的内存块
		注意点:
			1:如果ptr 是NULL 指针, 则free 对ptr 无论操作多少次都不会出现问题
			2:如果ptr 不是NULL 指针, 那么free 对ptr 连续操作两次就会导致程序
			  运行错误.



示例
	malloc.c
	calloc.c
	realloc.c			// realloc 可以用来创建动态数组
	element.h  teacher.h  teacher.c  teacher_test.c
	element.h  sort.h  sort.c  sort_tset.c
