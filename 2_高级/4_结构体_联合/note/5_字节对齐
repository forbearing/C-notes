1:字节对齐的概念
	1:现代计算机中内存空间都是按照 byte 划分的,从理论上讲,似乎对任何类型的变量的
	  访问可以从任何地址开始,但实际情况是在访问特定类型变量的时候经常在特定的内
	  存地址访问
	2:字节对齐的定义: 各种类型的数据安装一定的规则在空间上排列,而不是顺序的一个
	  接一个的排放.
	3:字节对齐的原因和作用
		1:各个平台对存储空间的处理上有很大的不同
			有些平台每次读都是从偶地址开始,如果一个 int 型(假设为32系统)存放在
			偶地址开始的地方,那么一个读周期就可以读出这32bit,而如果存放在奇地址
			开始的地方,就需要2个读周期,并对两次读出的结果的高低字节进行拼凑才能
			等到改32bit数据,显然在读取效率上下降很多
		2:利用字节对齐可提高存取效率


2:字节对齐对程序的影响
	typedef struct{				typedef struct{
		int a;						char b;
		char b;						int a;
		short c;					short c;
	}A;							}B;
	1:A占8个字节, B占12个字节


3:#pragma 指令设置字节对齐
	/* 指定按2字节对齐 */		/* 指定按1字节对齐 */
	#pragma pack(2)				#pragma pack(1)
	struct C{					struct D{
		char b;						char b;
		int a;						int a;
		short c;					short c;
	};							};
	#pragma pack()				#pragma pack()
	sizeof(struct C)的值为8
	sizeof(struct D)的值为7


4:编译器的字节对齐原则
	1:基本概念
		1:数据类型自身的对齐值
			char 型数据, 其自身对齐值为1
			short 型为2
			int,float,double 类型,其自身对齐值为4
		2:结构体自身对齐值:其成员中自身对齐值最大的值
		3:指定对齐值: #pragma pack(value) 时的指定对齐值中小的那个值
	2:重要概念
		1:有效对齐N: 存放其实地址 %N=0
		2:对齐值圆整: 结构体成员变量占用总长度需要是对结构体有效对齐值的整数倍


5:字节对齐的编程设置
	1:空间换取时间
		1:结构体中的成员按类型大小从小到大定义
			struct A{
				char a;
				char reserved[3];	// 使空间换时间
				int b;
			}
	


示例:
	byte.c				// 字节对齐
