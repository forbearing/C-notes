1:结构体指针的概念
	1:结构体变量的地址(即结构体变量的第一个成员的地址)称为结构体指针,结构体指针
	  指向一个结构体变量
	2:结构体指针变量中的值时所指向的结构体变量的地址
	3:通过结构体指针可访问它所指向的结构体变量包括其中的成员,这与数组指针和函数
	  指针的情况时相同的
	4:结构体指针的定义:
		struct 结构体名* 结构体指针变量名;
	5:结构体指针的初始化
		结构体指针变量名 = &结构体变量;
		结构体指针必须要先初始化后才能使用


2:结构体变量成员的访问方式
	1:通过结构体指针访问结构体变量的成员
		结构体指针->成员名	或
		(*结构体指针).成员名
		1:如 stup->name;  (*stup).name
		2:第二种方式两侧的括号不可少,因为运算符"."的优先级高于"*"
	2:访问结构体变量的三种方式
		1:方式一: 结构体指针->成员名
		2:方式二: (*结构体指针).成员名
		3:方式三: 结构体变量.成员名


3:结构体指针作为函数参数
	1:在C语言中允许用结构体变量作为函数参数进行整体传送,但是这种传送要将全部成员
	  逐个传送,特别时成员为数组时将会使传送的时间和空间开销很大,严重降低了程序的
	  效率
	2:最好的办法就是使用结构体指针,即用结构体指针变量作为函数参数进行传送,这时由
	  实参传向行惨的只是地址,从而减少了时间和空间的开销


4:指向结构体数组的指针
	1:结构体指针可以指向一个结构体数组,结构体指针变量的值是整个结构体数组的
	  首地址
	2:结构体指针也可以指向结构体数组中的一个元素即结构体变量,这时结构体指针变量
	  的值就是改结构体数组元素的地址
	3:一个结构体指针虽然可以用来访问结构体变量或结构体数组元素的成员,但是不能使
	  它指向一个成员,也就是说不允许区一个 成员的地址来赋予它


5:结构体的自引用和不完整声明
	1:结构体的自引用:
		在一个结构体内部包含指向该结构体本身的指针(事实上指向的是同一类型的不同
		结构体变量)
		struct SELF_REF1{
			int a;
			struct SELF_REF1 *b;
			int c;
		}
	2:结构体的不完整声明
		1:不同结构体相互依赖
		2:解决方案: 声明一个作为结构体标签的标识符
			struct B;
			struct A{
				struct B *partner;
			}
			struct B{
				struct A *partner;
			}
