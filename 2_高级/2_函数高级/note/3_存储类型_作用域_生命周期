1:作用域的分类
	1:文件作用域: 变量从它定义的位置开始直到这个程序文件的末尾都有效,这种变量
	  称为全局变量
	2:函数作用域: 变量仅在函数中都有效,这种变量称为局部变量
	3:代码块作用域: 变量位于一对{}括号中(函数体或语句块), 从它定义的位置开始到
	  右括号之间有效,代码块还包括由 for 循环, while 循环, do-while 循环, if 语句
	  所控制的代码
	4:函数原型作用域: 变量出现在函数原型中,这个函数原型只是一个声明而不是定义(没
	  有函数体),那么变量从声明的位置开始到这个原型末尾之间有效


2:变量的存储类型
	1:存储类型分类:
		1:auto(自动变量): 局部变量在缺省存储类型的情况下归为自动变量,默认不会初
		  始化,会产生随机数
		2:static(静态变量): 在程序执行时存在,并且只要整个程序在运行,就可以继续
		  访问该变量. 默认会初始化并仅初始化一次
		3:extern(外部变量/全局变量): 作用域是整个程序,包含该程序的各个文件. 生存
		  期非常长,它在该吃呢更需运行结束后,才释放内存,默认会初始化,仅初始化一次
		4:register(寄存器变量): 存放在 CPU 的寄存器中,对于循环次数较多的循环控制
		  变量即循环体内反复使用的变量均可定义为寄存器变量. 只能是局部变量不能是
		  全局变量并且不能加 static 修饰, 默认不会初始化


3:变量的内存分配方式
	1:静态存储区(属于数据段)上分配: 针对全局变量和 static 变量,程序在编译时编译
	  器就已对其分配好内存地址,这块内存在程序的整个运行期间都存在,这些变量的值在
	  程序运行器件一直存在,直到程序运行结束才会被释放.
	  objdump -xd file
	2:栈上分配: 针对局部变量(包括参数),在每次调用函数时,系统会动态为局部变量在栈
	  中分配呢称空间,在函数调用后这些局部变量占用的内存空间会被自动释放
	3:堆上分配: 或者称动态内存分配,由程序员调用 malloc 等函数可以向系统申请任意
	  指定大小的内存,并由程序员自己调用 free 等函数来释放内存,动态内存的生命期由
	  程序员决定,使用灵活,但问题也最多.


4:变量的存储方式
	1:静态存储方式: 程序在编译时分配的固定存储空间(静态存储区)的方式,程序执行完
	  毕就释放. 全局变量和静态变量属于静态存储方式,存放在静态存储区中
	2:动态存储方式
		1:程序运行期间根据需要进行动态的分配存储空间(动态存储区)的方式. 属于动态
		  存储方式的包括:
			1:函数的形参
			2:自动变量(带 auto 或不带 auto 的局部变量)
			3:函数调用时的现场保护和返回地址等
		2:对以上数据,在函数调用开始时分配动态存储空间,函数调用结束时释放这些空间


5:变量的作用域和生命周期
	1:变量作用域和生命周期的区别
		1:自动变量: 作用域: 限于一个函数内有效
					生命周期: 限于一个函数,函数调用借宿后被释放
		2:寄存器变量: 作用域: 同自动变量
					  生命周期: 同自动变量
		3:静态局部变量: 作用域: 限于一个函数内有效
						生命周期: 限于整个程序的生命周期,程序运行结束才会被释放
		4:静态全局变量: 作用域: 限于一个源文件
						生命周期: 同静态局部变量
		5:全局变量(外部变量): 作用域:一个源文件范围,也可以通过 extern 声明扩展到
									 程序中的多个源文件
							  生命周期: 同静态局部变量



6:链接属性
	1:External
		1:存储类型为 extern
		2:可以在当前文件和其他文件使用
	2:Internal
		1:存储类型为 static
		2:仅限于当前文件或函数使用
	3:None
		1:存储类型为 auto
		2:仅限于函数使用
	备注
		1:链接属性适用于变量和函数
		2:static 可以修饰链接属性,存储类型,作用域和生命周期
		3:extern 属性的函数或变量如果作用到其他文件,需要 gcc 同时编译两个文件,
		  并且只能有一个 main 函数


7:内部函数和外部
	1:内部函数
		1:一个函数只能被本文件中的其他函数调用称为内部函数
		2:内部函数的声明: 
			static 类型说明符 函数名(形参列表);
			1:内部函数也称为静态函数,仅限于本文件内调用
			2:若在不同文件中有同名的内部函数也互不干扰
	2:外部函数
		1:函数声明时在函数前面使用 extern 修饰称为外部函数,省略 extern 默认就是
		  外部函数
