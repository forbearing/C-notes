1:原子操作
	1:文件追加
		1:打开文件时使用 O_APPEND 标志,进程对文件偏移量调整和数据追加为原子操作
		2:内核每次对文件写之前,都将进程的当前偏移量设置为该文件的尾端,这样不再
		  需要 lseek 调整偏移量
	2:文件创建
		对 open 函数的 O_CREAT 和 O_EXCL 的使用,而该文件存在, open 将失败,否则
		创建该文件,并且使得文件是否存在的判断和创建过程称为原子操作
2:其他
	1:O_APPEND 的原子操作:
		write (){				// 成为原子操作
			1:从i节点中读取文件长度作为当前偏移量
			2:往文件中写入数据
			3:修改i节点中文件长度
		}

示例:
	file_append.c				// 两个相同程序在不同时间执行相同命令
